import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class DecimalConverter {
    private static List<String> conversionHistory = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean continueRunning = true;

        System.out.println("=== Binary to Decimal Converter ===");
        
        while (continueRunning) {
            System.out.println("\nOptions:");
            System.out.println("1. Convert binary to decimal");
            System.out.println("2. View conversion history");
            System.out.println("3. Exit");
            System.out.print("Choose an option (1-3): ");

            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Error: Please enter a valid number.");
                continue;
            }

            switch (choice) {
                case 1:
                    performConversion(scanner);
                    break;
                case 2:
                    displayHistory();
                    break;
                case 3:
                    continueRunning = false;
                    System.out.println("Exiting program...");
                    break;
                default:
                    System.out.println("Error: Invalid option. Please choose 1, 2, or 3.");
            }
        }
        scanner.close();
    }

    private static void performConversion(Scanner scanner) {
        System.out.print("Enter a binary number (0s and 1s only): ");
        String binaryInput = scanner.nextLine().trim();

        // Validate binary input
        if (!isValidBinary(binaryInput)) {
            System.out.println("Error: Invalid binary number. Please use only 0s and 1s.");
            return;
        }

        try {
            long decimalResult = binaryToDecimal(binaryInput);
            String conversionRecord = "Binary: " + binaryInput + " -> Decimal: " + decimalResult;
            conversionHistory.add(conversionRecord);
            System.out.println("Decimal equivalent: " + decimalResult);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static boolean isValidBinary(String binary) {
        if (binary == null || binary.isEmpty()) {
            return false;
        }
        return binary.matches("^[01]+$");
    }

    private static long binaryToDecimal(String binary) throws ArithmeticException {
        long decimal = 0;
        for (int i = 0; i < binary.length(); i++) {
            char digit = binary.charAt(i);
            int position = binary.length() - 1 - i;
            if (digit == '1') {
                decimal += Math.pow(2, position);
            }
            // Check for overflow
            if (decimal < 0) {
                throw new ArithmeticException("Result too large for long type.");
            }
        }
        return decimal;
    }

    private static void displayHistory() {
        if (conversionHistory.isEmpty()) {
            System.out.println("No conversions in history.");
            return;
        }
        System.out.println("\n=== Conversion History ===");
        for (int i = 0; i < conversionHistory.size(); i++) {
            System.out.println((i + 1) + ". " + conversionHistory.get(i));
        }
    }
}
